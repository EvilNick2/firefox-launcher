name: Build and Release Executable

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with PyInstaller
      run: |
        pyinstaller Firefox-Launch-GUI.spec

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: firefox-launch-gui
        path: dist/Firefox-Launch-GUI.exe

  release:
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: firefox-launch-gui
        path: dist

    - name: Get latest tag from GitHub
      id: get_latest_tag
      run: |
        echo "Fetching the latest tag from GitHub..."
        latest_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/EvilNick2/firefox-launcher/tags" | \
          jq -r '.[0].name')
        if [ -z "$latest_tag" ]; then
          latest_tag="v0.0.0"
        fi
        echo "Latest tag: $latest_tag"
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      shell: bash

    - name: Increment tag
      id: increment_tag
      run: |
        latest_tag=${{ env.latest_tag }}
        if [ "$latest_tag" = "v0.0.0" ]; then
          new_tag="v1.0.0"
        else
          IFS='.' read -r -a parts <<< "${latest_tag#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
        fi
        echo "New tag: $new_tag"
        echo "new_tag=$new_tag" >> $GITHUB_ENV
      shell: bash

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_tag }}
        release_name: Firefox Launch GUI ${{ env.new_tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/Firefox-Launch-GUI.exe
        asset_name: Firefox-Launch-GUI.exe
        asset_content_type: application/octet-stream