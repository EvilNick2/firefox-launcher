name: Build and Release Executable

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with PyInstaller
      run: |
        pyinstaller Firefox-Launch-GUI.spec

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: firefox-launch-gui
        path: dist/Firefox-Launch-GUI

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: firefox-launch-gui
        path: dist/Firefox-Launch-GUI

    - name: Get latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        echo "Latest tag: $latest_tag"
        echo "::set-output name=latest_tag::$latest_tag"

    - name: Increment tag
      id: increment_tag
      run: |
        latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
        if [ -z "$latest_tag" ]; then
          new_tag="v1.0.0"
        else
          IFS='.' read -r -a parts <<< "${latest_tag#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
        fi
        echo "New tag: $new_tag"
        echo "::set-output name=new_tag::$new_tag"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.increment_tag.outputs.new_tag }}
        release_name: Firefox Launch GUI ${{ steps.increment_tag.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/Firefox-Launch-GUI/Firefox-Launch-GUI.exe
        asset_name: Firefox-Launch-GUI.exe
        asset_content_type: application/octet-stream